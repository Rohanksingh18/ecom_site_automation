import pytest
import logging as logger
from ecom_test.src_file.utilities.generic_utilities import generate_random_email_and_password
from ecom_test.src_file.api_helpers.CustomersApiHelpers import CustomersAPIHelper



#define username and password
@pytest.fixture(scope='function')
def create_user_email_password_only():

    rand_info = generate_random_email_and_password()

    email = rand_info['email']
    password = rand_info['password']

    # make the call
    cust_obj = CustomersAPIHelper()
    cust_api_info = cust_obj.call_create_customer(email=email, password=password)

    data = {"email": email, "password": password, "api_response": cust_api_info}

    return data

# Verify create customer with only email and password provided has the names/
# (first name and last name) of the customer will be empty strings in the system.
@pytest.mark.customers
@pytest.mark.tcid31
def test_create_customer_names_should_be_empty_string_if_not_provided():
    logger.info("TEST: Verify create customer with only email and password has names as empty string")

    # generate email and password
    rand_info = generate_random_email_and_password()
    email = rand_info['email']
    password = rand_info['password']

    # make the call (request to create customer)
    cust_obj = CustomersAPIHelper()
    cust_api_info = cust_obj.call_create_customer(email=email, password=password)

    # Verify names are empty strings
    assert cust_api_info['first_name'] == '', f"Creating user without providing name expected to create first_name='' but it was first_name={cust_api_info['first_name']}"
    assert cust_api_info['last_name'] == '', f"Creating user without providing name expected to create last_name='' but it was first_name={cust_api_info['last_name']}"


    # Verify 'username' is autogenerated based on email

@pytest.mark.tcid32
def test_create_customer_fail_when_no_password_is_provided(create_user_email_password_only):
    logger.info("TEST: Verify 'username' is autogenerated based on email")

    # API call (request)
    api_username = create_user_email_password_only['api_response']['username']
    email = create_user_email_password_only['email']
    expected_username = email.split('@')[0]
    assert api_username == expected_username, f"Creating user with only email and password should've created user name based on email." \
                                              f"Expected username: {expected_username}, Actual username: {api_username}"


